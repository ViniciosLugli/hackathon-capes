generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Article {
    id              String    @id @default(cuid())
    doi             String?   @unique
    title           String
    abstract        String    @db.Text
    language        String
    volume          String?
    issue           String?
    pageStart       Int?
    pageEnd         Int?
    publicationDate DateTime?
    authors         String[]
    institutions    String[]

    // Publication details
    journalName   String?
    publisherName String?

    // Classification
    topics    Topic[]
    keywords  Keyword[]
    fieldArea FieldArea[]

    // Status and access
    status       ArticleStatus @default(PUBLISHED)
    isOpenAccess Boolean       @default(false)
    peerReviewed Boolean       @default(false)

    // References and metrics
    citations Citation[] @relation("CitingArticles")
    citedBy   Citation[] @relation("CitedArticles")
    metrics   Metrics?

    // Quality metrics
    qualityScore     Float? @default(0)
    readabilityScore Float? @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Topic {
    id          String    @id @default(cuid())
    name        String    @unique
    description String?   @db.Text
    articles    Article[]
    parentTopic Topic?    @relation("TopicHierarchy", fields: [parentId], references: [id])
    parentId    String?
    subtopics   Topic[]   @relation("TopicHierarchy")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model FieldArea {
    id          String    @id @default(cuid())
    name        String    @unique
    description String?   @db.Text
    articles    Article[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Keyword {
    id        String    @id @default(cuid())
    name      String    @unique
    articles  Article[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Citation {
    id              String   @id @default(cuid())
    citingArticle   Article  @relation("CitingArticles", fields: [citingArticleId], references: [id])
    citingArticleId String
    citedArticle    Article  @relation("CitedArticles", fields: [citedArticleId], references: [id])
    citedArticleId  String
    citationText    String   @db.Text
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@unique([citingArticleId, citedArticleId])
}

model Metrics {
    id             String   @id @default(cuid())
    article        Article  @relation(fields: [articleId], references: [id])
    articleId      String   @unique
    citations      Int      @default(0)
    views          Int      @default(0)
    downloads      Int      @default(0)
    altmetricScore Float?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

enum ArticleStatus {
    DRAFT
    PUBLISHED
    RETRACTED
}
